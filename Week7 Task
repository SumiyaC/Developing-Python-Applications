1.
Code:
class Complex:
    def __init__(self,realnumA,realnumB,imaginumI):
        self.a=realnumA
        self.b=realnumB
        self.c=imaginumI

    def getRealNumA(self):
        return self.a

    def getRealNumB(self):
        return self.b

    def getImaginaryNumI(self):
        return self.c

    def setRealNumA(self,realnumA):
        self.a=realnumA

    def setRealNumB(self,realnumB):
        self.b = realnumB

    def setImaginaryNumI(self,imaginumI):
        self.c = imaginumI

j=Complex(4,7,"i")
print(j.getImaginaryNumI())
j.setImaginaryNumI("67+11i")
print(j.getImaginaryNumI())


Output:
i
67+11i





2.
Code:
import time
class Clock:

    def __init__(self, startHour, startMin, startSec):
        self.startHour=startHour
        self.startMin=startMin
        self.startSec=startSec


    def setTime(self, startHour, startMin, startSec):
        if startHour < 0:
            self.startHour = 0
        elif startHour > 23:
            self.startHour = 23
        else:
            self.startHour = startHour

        if startMin < 0:
            self.startMin = 0
        elif startMin > 59:
            self.startMin = 59
        else:
            self.startMin = startMin

        if startSec < 0:
            self.startSec = 0
        elif startSec > 59:
            self.startSec = 59
        else:
            self.startSec = startSec

    def ticking(self):
        while True:
            print('\r', "{}:{}:{}".format(str(self.startHour), str(self.startMin), str(self.startSec)), end="")
            self.startSec += 1
            time.sleep(1)
            if self.startSec == 60:
                self.startSec = 0
                self.startMin += 1
                if self.startMin == 60:
                    self.startMin=0
                    self.startHour += 1
                    if self.startHour == 24:
                        self.startHour = 0


class AlarmClock(Clock):

    def __init__(self, startHour, startMin, startSec, alarmHour, alarmMin, alarmSec):
        super().__init__(startHour, startMin, startSec)
        self.alarmHour = alarmHour
        self.alarmMin = alarmMin
        self.alarmSec=alarmSec

    def setAlarm(self, alarmHour, alarmMin, alarmSec):
        if alarmHour < 0:
            self.alarmHour = 0
        elif alarmHour > 23:
            self.alarmHour = 23
        else:
            self.alarmHour = alarmHour

        if alarmMin < 0:
            self.alarmMin = 0
        elif alarmMin > 59:
            self.alarmMin = 59
        else:
            self.alarmMin = alarmMin

        if alarmSec < 0:
            self.alarmSec = 0
        elif alarmSec > 59:
            self.alarmSec = 59
        else:
            self.alarmSec = alarmSec

    def alarming(self):
        print("Time starts from",self.startHour,":",self.startMin,":",self.startSec)
        print("Alarm is set for",self.alarmHour,":",self.alarmMin,":",self.alarmSec)
        while True:
            print('\r',"{}:{}:{}".format(str(self.startHour),str(self.startMin),str(self.startSec)),end="")
            self.startSec += 1
            time.sleep(1)
            if self.startSec == 60:
                self.startSec = 0
                self.startMin += 1
                if self.startMin == 60:
                    self.startMin = 0
                    self.startHour += 1
                    if self.startHour == 24:
                        self.startHour = 0
            if self.startHour == self.alarmHour and self.startMin == self.alarmMin and self.startSec == self.alarmSec:
                print(end="\n")
                print("ALARM Ringing!!",)
                break

v=AlarmClock(3,1,1,3,1,6)
v.setAlarm(3,1,6)
v.alarming()

Output:
Time starts from 3 : 1 : 1
Alarm is set for 3 : 1 : 6
3:1:5
ALARM Ringing!!

3.
Code:

class Bird:
    def __init__(self,name,egg):
        self.a=name
        self.b=egg

    def birdName(self):
        a=self.a
        return a

    def numOfEgg(self):
        if self.b >=1 and self.b <=10:
            return b
        else:
            return "WRONG!! Again try by inputting the amount of egg between 1 to 10"


class Migratory:
    def __init__(self,country,month):
        self.c=country
        self.d=month

    def countryName(self):
            def Convert(x):
                lst = []
                lst[:0] = x
                return lst

            y = self.c
            z = Convert(y)
            #print(z)
            if z[0].isupper():
                if (len(z) >= 5) and len(z) <= 20:
                    print("the destination country is:", y)
                else:
                    print(
                        "WRONG!! Check the 1st letter is capital or not and the length is between 5 to 20 or not and TRY AGAIN!")
            else:
                return "Check the 1st letter is capital or not and the length is between 5 to 20 or not and TRY AGAIN!"


    def monthOfMigration(self):
        d=self.d
        if self.d>=1 and self.d<=12:
            return d
        else:
            print("Again try by inputting thr migratory month between 1 to 12:")


r=Bird("Crow",0)
print("Name of the bird:",r.birdName())
print("Number of eggs:",r.numOfEgg())
m=Migratory("iraq",2)
print("Name of destination country:",m.countryName())
print("Month of migration:",m.monthOfMigration())

Output:

Name of the bird: Crow
Number of eggs: WRONG!! Again try by inputting the amount of egg between 1 to 10
Name of destination country: Check the 1st letter is capital or not and the length is between 5 to 20 or not and TRY AGAIN!
Month of migration: 2



Bonus task:
1)
Yes, I found an UML tools for python. We can use UML in Visual Studio Code.
It can generate python code from class diagrams. We can also do reverse engineering using Visual Studio Code.

